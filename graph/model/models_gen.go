// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/KnightHacks/knighthacks_shared/models"
)

type Connection interface {
	IsConnection()
}

type Event struct {
	ID        string     `json:"id"`
	Hackathon *Hackathon `json:"hackathon"`
}

func (Event) IsEntity() {}

type EventsConnection struct {
	TotalCount int              `json:"totalCount"`
	PageInfo   *models.PageInfo `json:"pageInfo"`
	Events     []*Event         `json:"events"`
}

func (EventsConnection) IsConnection() {}

type Hackathon struct {
	ID           string                          `json:"id"`
	Term         *Term                           `json:"term"`
	StartDate    time.Time                       `json:"startDate"`
	EndDate      time.Time                       `json:"endDate"`
	Sponsors     *SponsorsConnection             `json:"sponsors"`
	Events       *EventsConnection               `json:"events"`
	Status       HackathonStatus                 `json:"status"`
	Applications *HackathonApplicationConnection `json:"applications"`
}

func (Hackathon) IsEntity() {}

type HackathonApplication struct {
	ID                    string            `json:"id"`
	Status                ApplicationStatus `json:"status"`
	User                  *User             `json:"user"`
	Hackathon             *Hackathon        `json:"hackathon"`
	WhyAttend             []string          `json:"whyAttend"`
	WhatDoYouWantToLearn  []string          `json:"whatDoYouWantToLearn"`
	ShareInfoWithSponsors bool              `json:"shareInfoWithSponsors"`
	ResumeURL             *string           `json:"resumeUrl"`
}

type HackathonApplicationConnection struct {
	TotalCount   int                     `json:"totalCount"`
	PageInfo     *models.PageInfo        `json:"pageInfo"`
	Applications []*HackathonApplication `json:"applications"`
}

func (HackathonApplicationConnection) IsConnection() {}

type HackathonApplicationInput struct {
	WhyAttend             []string        `json:"whyAttend"`
	WhatDoYouWantToLearn  []string        `json:"whatDoYouWantToLearn"`
	ShareInfoWithSponsors bool            `json:"shareInfoWithSponsors"`
	Resume                *graphql.Upload `json:"resume"`
}

type HackathonCreateInput struct {
	Year      int       `json:"year"`
	Semester  Semester  `json:"semester"`
	Sponsors  []string  `json:"sponsors"`
	Events    []string  `json:"events"`
	StartDate time.Time `json:"startDate"`
	EndDate   time.Time `json:"endDate"`
}

type HackathonFilter struct {
	Year     int       `json:"year"`
	Semester *Semester `json:"semester"`
}

type HackathonUpdateInput struct {
	Year                *int      `json:"year"`
	Semester            *Semester `json:"semester"`
	AddedSponsors       []string  `json:"addedSponsors"`
	RemovedSponsors     []string  `json:"removedSponsors"`
	AddedEvents         []string  `json:"addedEvents"`
	RemovedEvents       []string  `json:"removedEvents"`
	AddedParticipants   []string  `json:"addedParticipants"`
	RemovedParticipants []string  `json:"removedParticipants"`
}

type Sponsor struct {
	ID         string       `json:"id"`
	Hackathons []*Hackathon `json:"hackathons"`
}

func (Sponsor) IsEntity() {}

type SponsorsConnection struct {
	TotalCount int              `json:"totalCount"`
	PageInfo   *models.PageInfo `json:"pageInfo"`
	Sponsors   []*Sponsor       `json:"sponsors"`
}

func (SponsorsConnection) IsConnection() {}

type Term struct {
	Year     int      `json:"year"`
	Semester Semester `json:"semester"`
}

type User struct {
	ID           string                  `json:"id"`
	Applications []*HackathonApplication `json:"applications"`
}

func (User) IsEntity() {}

type UsersConnection struct {
	TotalCount int              `json:"totalCount"`
	PageInfo   *models.PageInfo `json:"pageInfo"`
	Users      []*User          `json:"users"`
}

func (UsersConnection) IsConnection() {}

type ApplicationStatus string

const (
	ApplicationStatusAccepted ApplicationStatus = "ACCEPTED"
	ApplicationStatusWaiting  ApplicationStatus = "WAITING"
	ApplicationStatusRejected ApplicationStatus = "REJECTED"
)

var AllApplicationStatus = []ApplicationStatus{
	ApplicationStatusAccepted,
	ApplicationStatusWaiting,
	ApplicationStatusRejected,
}

func (e ApplicationStatus) IsValid() bool {
	switch e {
	case ApplicationStatusAccepted, ApplicationStatusWaiting, ApplicationStatusRejected:
		return true
	}
	return false
}

func (e ApplicationStatus) String() string {
	return string(e)
}

func (e *ApplicationStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = ApplicationStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid ApplicationStatus", str)
	}
	return nil
}

func (e ApplicationStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type HackathonStatus string

const (
	HackathonStatusPast    HackathonStatus = "PAST"
	HackathonStatusPresent HackathonStatus = "PRESENT"
	HackathonStatusFuture  HackathonStatus = "FUTURE"
)

var AllHackathonStatus = []HackathonStatus{
	HackathonStatusPast,
	HackathonStatusPresent,
	HackathonStatusFuture,
}

func (e HackathonStatus) IsValid() bool {
	switch e {
	case HackathonStatusPast, HackathonStatusPresent, HackathonStatusFuture:
		return true
	}
	return false
}

func (e HackathonStatus) String() string {
	return string(e)
}

func (e *HackathonStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = HackathonStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid HackathonStatus", str)
	}
	return nil
}

func (e HackathonStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Semester string

const (
	SemesterFall   Semester = "FALL"
	SemesterSpring Semester = "SPRING"
	SemesterSummer Semester = "SUMMER"
)

var AllSemester = []Semester{
	SemesterFall,
	SemesterSpring,
	SemesterSummer,
}

func (e Semester) IsValid() bool {
	switch e {
	case SemesterFall, SemesterSpring, SemesterSummer:
		return true
	}
	return false
}

func (e Semester) String() string {
	return string(e)
}

func (e *Semester) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Semester(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Semester", str)
	}
	return nil
}

func (e Semester) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
