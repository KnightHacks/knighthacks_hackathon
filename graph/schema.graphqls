scalar Time
scalar Upload

directive @goModel(model: String, models: [String!]) on OBJECT
    | INPUT_OBJECT
    | SCALAR
    | ENUM
    | INTERFACE
    | UNION

directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION
    | FIELD_DEFINITION

directive @hasRole(role: Role!) on FIELD_DEFINITION | OBJECT # set minimum layer of security
directive @pagination(maxLength: Int!) on FIELD_DEFINITION

interface Connection {
    # The total number of entries
    totalCount: Int
    # Information for paginating this connection
    pageInfo: PageInfo!
}

type PageInfo @goModel(model: "github.com/KnightHacks/knighthacks_shared/models.PageInfo") {
    # the first entry
    startCursor: String!
    # the last entry
    endCursor: String!
}

# A connection object for a list of users
type UsersConnection implements Connection {
    totalCount: Int!
    pageInfo: PageInfo!

    users: [User!]!
}

# A connection object for a list of sponsors
type SponsorsConnection implements Connection {
    totalCount: Int!
    pageInfo: PageInfo!

    sponsors: [Sponsor!]!
}

# A connection object for a list of events
type EventsConnection implements Connection {
    totalCount: Int!
    pageInfo: PageInfo!

    events: [Event!]!
}

type HackathonApplicationConnection implements Connection {
    totalCount: Int!
    pageInfo: PageInfo!

    applications: [HackathonApplication!]!
}

enum Role @goModel(model: "github.com/KnightHacks/knighthacks_shared/models.Role") {
    ADMIN
    """
    for now keep this the same
    """
    SPONSOR
    NORMAL
    OWNS
}

extend type Event @key(fields: "id") {
    id: ID! @external
    hackathon: Hackathon! @goField(forceResolver: true)
}

extend type User @key(fields: "id") {
    id: ID! @external
    applications: [HackathonApplication!]! @goField(forceResolver: true)
}

extend type Sponsor @key(fields: "id") {
    id: ID! @external
    hackathons: [Hackathon!]! @goField(forceResolver: true)
}

type Hackathon @key(fields: "id") @key(fields: "term { year semester }"){
    id: ID!
    term: Term!
    startDate: Time!
    endDate: Time!

    sponsors(first: Int! = 25, after: ID): SponsorsConnection! @goField(forceResolver: true)
    events(first: Int! = 25, after: ID): EventsConnection! @goField(forceResolver: true)
    status: HackathonStatus! @goField(forceResolver: true)

    applications(first: Int! = 25, after: ID, status: ApplicationStatus!): HackathonApplicationConnection! @goField(forceResolver: true) @hasRole(role: ADMIN)
}

enum HackathonStatus {
    PAST
    PRESENT
    FUTURE
}

enum Semester {
    FALL
    SPRING
    SUMMER
}

type Term {
    year: Int!
    semester: Semester!
}

input HackathonFilter {
    year: Int!
    semester: Semester
}

input HackathonCreateInput {
    year: Int!
    semester: Semester!
    sponsors: [ID!]!
    events: [ID!]!
    startDate: Time!
    endDate: Time!
}

input HackathonUpdateInput {
    year: Int
    semester: Semester
    addedSponsors: [ID!]
    removedSponsors: [ID!]
    addedEvents: [ID!]
    removedEvents: [ID!]
}

input HackathonApplicationInput {
    whyAttend: [String!]
    whatDoYouWantToLearn: [String!]
    shareInfoWithSponsors: Boolean
}

enum ApplicationStatus {
    ACCEPTED, WAITING, REJECTED
}

type HackathonApplication @key(fields: "id") {
    id: ID!
    status: ApplicationStatus!
    hackathon: Hackathon! @goField(forceResolver: true)
    whyAttend: [String!]!
    whatDoYouWantToLearn: [String!]!
    shareInfoWithSponsors: Boolean!
    resumeURL: String!
}

type Query {
    currentHackathon: Hackathon
    hackathons(filter: HackathonFilter!): [Hackathon!]!
    getHackathon(id: ID!): Hackathon!
    getApplication(hackathonId: ID!, userId: ID!): HackathonApplication @hasRole(role: NORMAL) # will manually check if userId = the logged in user
}

type Mutation {
    createHackathon(input: HackathonCreateInput!): Hackathon! @hasRole(role: ADMIN)
    updateHackathon(id: ID!, input: HackathonUpdateInput!): Hackathon! @hasRole(role: ADMIN)
    deleteHackathon(id: ID!): Boolean! @hasRole(role: ADMIN)

    acceptApplicant(hackathonId: ID!, userId: ID!): Boolean! @hasRole(role: ADMIN)
    denyApplicant(hackathonId: ID!, userId: ID!): Boolean! @hasRole(role: ADMIN)

    updateApplication(hackathonId: ID!, userId: ID!, input: HackathonApplicationInput!): HackathonApplication @hasRole(role: NORMAL) # will manually check if userId = the logged in user
    applyToHackathon(hackathonId: ID!, input: HackathonApplicationInput!): String! @hasRole(role: NORMAL)
}
