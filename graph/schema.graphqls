scalar Time

directive @goModel(model: String, models: [String!]) on OBJECT
    | INPUT_OBJECT
    | SCALAR
    | ENUM
    | INTERFACE
    | UNION

directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION
    | FIELD_DEFINITION

extend type Event @key(fields: "id") {
    id: ID! @external
    hackathon: Hackathon! @goField(forceResolver: true)
}

extend type User @key(fields: "id") {
    id: ID! @external
    hackathons: [Hackathon!]! @goField(forceResolver: true)
}

extend type Sponsor @key(fields: "id") {
    id: ID! @external
    hackathons: [Hackathon!]! @goField(forceResolver: true)
}

type Hackathon @key(fields: "id") @key(fields: "term { year semester }"){
    id: ID!
    term: Term!
    startDate: Time!
    endDate: Time!

    attendees: [User!]! @goField(forceResolver: true)
    sponsors: [Sponsor!]! @goField(forceResolver: true)
    events: [Event!]! @goField(forceResolver: true)
    status: HackathonStatus! @goField(forceResolver: true)
}

enum HackathonStatus {
    PAST
    PRESENT
    FUTURE
}

enum Semester {
    FALL
    SPRING
    SUMMER
}

type Term {
    year: Int!
    semester: Semester!
}

input HackathonFilter {
    year: Int!
    semester: Semester
}

input HackathonCreateInput {
    year: Int!
    semester: Semester!
    sponsors: [ID!]
    events: [ID!]
}

input HackathonUpdateInput {
    year: Int
    semester: Semester
    deletedSponsors: [ID!]
    addedSponsors: [ID!]
    addedEvents: [ID!]
    deletedEvents: [ID!]
}

type Query {
    currentHackathon: Hackathon
    hackathons(filter: HackathonFilter!): [Hackathon!]!
    getHackathon(id: ID!): Hackathon!
}

type Mutation {
    createHackathon(input: HackathonCreateInput!): Hackathon!
    updateHackathon(id: ID!, input: HackathonUpdateInput!): Hackathon!
}
